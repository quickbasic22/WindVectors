using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;

namespace WindVectors
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            NumUpDownWindDirection.Maximum = 360;
            NumUpDownWindMagnitude.Maximum = 10000;
            TxtAirplaneMagnitude.Text = 550.ToString();
            TxtAirplaneDirection.Text = 180.ToString();
            NumUpDownWindMagnitude.Value = 100;
            NumUpDownWindDirection.Value = 0;

        }

        private void BtnConvert_Click(object sender, EventArgs e)
        {
            double planeMag = double.Parse(TxtAirplaneMagnitude.Text);
            double planeDir = double.Parse(TxtAirplaneDirection.Text);
            double WindMag = double.Parse(NumUpDownWindMagnitude.Value.ToString());
            double WindDir = double.Parse(NumUpDownWindDirection.Value.ToString());
            var (x, y) = PolarToRectangular(planeMag, planeDir);
            System.Diagnostics.Debug.WriteLine($"x = {0} y = {1}", x, y);
            var (r, Beta) = PolarToRectangular(WindMag, WindDir);
            System.Diagnostics.Debug.WriteLine($"r = {0} Beta = {1}", r, Beta);
            double Mag = x + r;
            double Dir = y + Beta;
            var (resr, resBeta) = RectangularToPolar(Mag, Dir);
            TxtPlaneSpeedResult.Text = resr.ToString();
            TxtPlaneDirectionResult.Text = resBeta.ToString();

            Debug.WriteLine($"Answer is r ={0} Beta ={1}", RectangularToPolar(-450, 0).r, RectangularToPolar(-450, 0).Beta);


        }

        private static (double x, double y) PolarToRectangular(double r, double Beta)
        {
            Debug.WriteLine($"r = {r} Beta = {Beta} in PolarToRectangular Method", r, Beta);
            Beta = Math.PI / 180 * Beta;
            double x = Math.Round(r * Math.Cos(Beta), 0);
            double y = Math.Round(r * Math.Sin(Beta), 0);

            return (x: x, y: y);
        }

        private static (double r, double Beta) RectangularToPolar(double x, double y)
        {
            Debug.WriteLine($"x = {x} Beta = {y} in RectangularToPolar Method", x, y);
            double r = Math.Round(Math.Sqrt(Math.Pow(Math.Abs(x), 2) + Math.Pow(Math.Abs(y), 2)));
            double Beta = Math.Round(Math.Atan(Math.Abs(y / x)));
            Beta = 180 / Math.PI * Beta;
            if (x <= -1 && y == 0)
                    Beta = 180;
            return (r: r, Beta: Beta);
        }

    }
}
